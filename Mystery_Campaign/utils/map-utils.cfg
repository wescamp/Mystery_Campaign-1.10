#textdomain wesnoth-Mystery_Campaign

#define INCREASE_CASTLE
    [store_starting_location]
        side=2
    [/store_starting_location]

    {REPEAT $scenario_number (
        [store_locations]
            {EVERYWHERE}
            [and]
                [filter_adjacent_location]
                    x,y=$location.x,$location.y
                    radius=99
                    [filter_radius]
                        terrain=C*,K*,*^C*,*^K*
                    [/filter_radius]
                [/filter_adjacent_location]
            [/and]
            [not]
                terrain=C*,K*,*^C*,*^K*
            [/not]
            variable=here
        [/store_locations]

        {RANDOM 0.."$($here.length-1)"}
        [terrain]
            x,y=$here[$random].x,$here[$random].y
            terrain=Ch
        [/terrain]
    )}
    {CLEAR_VARIABLE here,location,random}
#enddef

#define GENERAL_MAP_NOISE
    [switch]
        variable=map_type
        [case]
            value=spring
            {VARIABLE great_tree ("Gg^Fet")}
            {VARIABLE castle_type ("v,v,e,o")}
            [terrain]
                terrain=Gg^Efm
                [filter_adjacent_location]
                    terrain=Ss,Gs
                    count=5-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Ww
                [and]
                    terrain=Wo*
                [/and]
                [filter_adjacent_location]
                    terrain=!,Wo*,Ww*
                    count=1-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            {SCATTER_EMBELLISHMENTS G* ^Wm 0.25}
            {SCATTER_EMBELLISHMENTS G* ^Efm 2}
            {SCATTER_EMBELLISHMENTS Re,Ds ^Gvs 0.25}
        [/case]
        [case]
            value=summer
            {VARIABLE great_tree ("Gs^Fet")}
            {VARIABLE castle_type ("hr,e,e,o")}
            [terrain]
                terrain=Dd
                [filter_adjacent_location]
                    terrain=Ss
                    count=2-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Gs
                [filter_adjacent_location]
                    terrain=Gll
                    count=3-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Gs
                [filter_adjacent_location]
                    terrain=Gg
                    count=3-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Ww
                [filter_adjacent_location]
                    terrain=Wwr
                    count=5-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Ww
                [and]
                    terrain=Wo*
                [/and]
                [filter_adjacent_location]
                    terrain=!,Wo*,Ww*
                    count=1-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            {SCATTER_EMBELLISHMENTS G* ^Wm 0.50}
            #{SCATTER_EMBELLISHMENTS G* ^Efm 0.25}
            {SCATTER_EMBELLISHMENTS Re,Ds ^Gvs 0.25}
        [/case]
        [case]
            value=fall
            {VARIABLE great_tree ("Gd^Fet")}
            {VARIABLE castle_type ("hr,hr,e,o")}
            [terrain]
                terrain=Ww
                [and]
                    terrain=Wo*
                [/and]
                [filter_adjacent_location]
                    terrain=!,Wo*,Ww*
                    count=1-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Ds
                [and]
                    terrain=Ss
                [/and]
                [filter_adjacent_location]
                    terrain=Ss
                    count=2-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            {SCATTER_EMBELLISHMENTS G* ^Wm 0.50}
            {SCATTER_EMBELLISHMENTS G* ^Efm 0.05}
            {SCATTER_EMBELLISHMENTS Re,Ds ^Gvs 0.25}
        [/case]
        [case]
            value=winter
            {VARIABLE great_tree ("Aa^Fetd")}
            {VARIABLE castle_type ("ha,oa,ea")}
            [terrain]
                terrain=Ms
                [filter_adjacent_location]
                    terrain=Ha
                    count=6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Ai
                [filter_adjacent_location]
                    terrain=Aa
                    count=5-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Aa^Fma
                [filter_adjacent_location]
                    terrain=Aa^Fpa
                    count=4-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Ha^Fma
                [filter_adjacent_location]
                    terrain=Ha^Fpa,Ha^Fda
                    count=4-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            {SCATTER_EMBELLISHMENTS Aa,Ha ^Es 3}
            {SCATTER_EMBELLISHMENTS Aa ^Emf 0.25}
        [/case]
        [case]
            value=cave
            {VARIABLE great_tree ("Rd^Fetd")}
            {VARIABLE castle_type ("ud,ud,hr")}
            [terrain]
                terrain=Xu
                [filter_adjacent_location]
                    terrain=Uh
                    count=6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Qlf
                [filter_adjacent_location]
                    terrain=*^Uf*
                    count=5-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Uue^Ii
                [filter_adjacent_location]
                    terrain=Ds
                    count=4-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Uue
                [filter_adjacent_location]
                    terrain=Qxe
                    count=3-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Ds
                [filter_adjacent_location]
                    terrain=Qlf
                    count=3-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Wwg
                [filter_adjacent_location]
                    terrain=Uue,Ss
                    count=2-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            {SCATTER_EMBELLISHMENTS ("G*,D*,R*,Uu*,Uh*,Aa") ^Es 2.5}
            {SCATTER_EMBELLISHMENTS ("Uu*,Uh*,D*") ^Em 5}
        [/case]
        [case]
            value=desert
            {VARIABLE great_tree ("Ds^Fetd")}
            {VARIABLE castle_type ("d,d,dr,dr,e")}
            [terrain]
                terrain=Md
                [filter_adjacent_location]
                    terrain=Hd,H*
                    count=6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Dd
                [filter_adjacent_location]
                    terrain=Ds
                    count=5-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Ww
                [filter_adjacent_location]
                    terrain=Gs,Dd^Do,Ss
                    count=6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            {SCATTER_EMBELLISHMENTS H*,D*,R* ^Esd 5}
            {SCATTER_EMBELLISHMENTS D* ^Edp 1.5}
            {SCATTER_EMBELLISHMENTS D* ^Edpp 3}
        [/case]
        [case]
            value=tropical
            {VARIABLE great_tree ("Ds^Ft")}
            {VARIABLE castle_type ("hw,hw,d,d,dr,dr,e")}
            [terrain]
                terrain=Wwrt
                [and]
                    terrain=Wwt
                [/and]
                [filter_adjacent_location]
                    terrain=Wwt,Wot
                    count=5-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Qlf
                [filter_adjacent_location]
                    terrain=Ds,Mm^Xm
                    count=5-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Gd
                [filter_adjacent_location]
                    terrain=Gs,Ss
                    count=4-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            [terrain]
                terrain=Wwt
                [and]
                    terrain=Wwrt
                [/and]
                [filter_adjacent_location]
                    terrain=Wwrt
                    count=5-6
                [/filter_adjacent_location]
                {NOT_CASTLE}
            [/terrain]
            {SCATTER_EMBELLISHMENTS Ss ^Ewf 5}
            {SCATTER_EMBELLISHMENTS Ss ^Ewl 10}
        [/case]
        [case]
            value=swamp
            {VARIABLE great_tree ("Gll^Fetd")}
            {VARIABLE castle_type ("hw,hw,hs,hs,o")}

            [terrain]
                terrain=Ds
                [filter_adjacent_location]
                    terrain=Wwg
                    count=6
                [/filter_adjacent_location]
                [not]
                    [filter_adjacent_location]
                        terrain=Ds
                        count=2-6
                    [/filter_adjacent_location]
                [/not]
                {NOT_CASTLE}
            [/terrain]
            {SCATTER_EMBELLISHMENTS Ss ^Ewf 5}
            {SCATTER_EMBELLISHMENTS Ss ^Ewl 10}

            [store_locations]
                terrain=Ss
                [filter_adjacent_location]
                    terrain=Ss
                    count=6
                [/filter_adjacent_location]
                variable=loc
            [/store_locations]

            {FOREACH loc i_temp}
                [terrain]
                    terrain=Ss^Fms
                    x,y=$loc[$i_temp].x,$loc[$i_temp].y
                    [not]
                        [filter_adjacent_location]
                            terrain=Ss^Fms
                            count=2-6
                        [/filter_adjacent_location]
                    [/not]
                [/terrain]
            {NEXT i_temp}
            {CLEAR_VARIABLE loc}
        [/case]
        [else]
            {VARIABLE great_tree ("Gg^Fet")}
            {VARIABLE castle_type ("v,hr,e,e,o,h")}

            [store_locations]
                terrain=Qxu
                variable=loc
            [/store_locations]

            {FOREACH loc i_temp}
                [terrain]
                    terrain=Uu^li
                    x,y=$loc[$i_temp].x,$loc[$i_temp].y
                    [filter_adjacent_location]
                        terrain=Qxu
                        count=5-6
                    [/filter_adjacent_location]
                [/terrain]
            {NEXT i_temp}
            {CLEAR_VARIABLE loc}
        [/else]
    [/switch]

    [command]
        [store_locations]
            terrain=*^F*
            [filter_adjacent_location]
                terrain=*^F*
                count=6
            [/filter_adjacent_location]
            variable=loc
        [/store_locations]

        {FOREACH loc i_temp}
            [terrain]
                terrain=$great_tree
                x,y=$loc[$i_temp].x,$loc[$i_temp].y
                [not]
                    [filter_adjacent_location]
                        terrain=$great_tree
                        count=1-6
                    [/filter_adjacent_location]
                [/not]
            [/terrain]
        {NEXT i_temp}
        {CLEAR_VARIABLE loc}
    [/command]

    [command]
        [store_map_dimensions]
            variable=map
        [/store_map_dimensions]

        {VARIABLE_OP random_number_of_castles rand 2..6}

        {REPEAT $random_number_of_castles (
            [store_locations]
                #{EVERYWHERE}
                x,y="2-$($map.width-1),2-$($map.heigth-1)"
                [not]
                    terrain="K*,*^K*"
                    radius=9
                [/not]
                [not]
                    terrain=Wo*,Xu*
                [/not]
                variable=possible_locs
            [/store_locations]

            {VARIABLE_OP random_loc rand 1..$possible_locs.length}
            {VARIABLE_OP random_loc sub 1}

            [terrain]
                terrain=Kh
                x,y=$possible_locs[$random_loc].x,$possible_locs[$random_loc].y
            [/terrain]

            [store_locations]
                [filter_adjacent_location]
                    x,y=$possible_locs[$random_loc].x,$possible_locs[$random_loc].y
                [/filter_adjacent_location]
                variable=for_castle
            [/store_locations]

            {VARIABLE_OP how_many rand 1..3}
            [while]
                {VARIABLE_CONDITIONAL REPEAT_j less_than $how_many}
                {VARIABLE_CONDITIONAL converted less_than $for_castle.length}
                [do]
                    {VARIABLE_OP random_castles rand 1..$for_castle.length}
                    {VARIABLE_OP random_castles sub 1}

                    {IF_VAR for_castle[$random_castles].terrain contains ("V") (
                        [else]
                            [terrain]
                                terrain=Ch
                                x,y=$for_castle[$random_castles].x,$for_castle[$random_castles].y
                            [/terrain]
                            {VARIABLE_OP converted add 1}
                        [/else]
                    )}
                    {VARIABLE_OP REPEAT_j add 1}
                [/do]
            [/while]
            {CLEAR_VARIABLE possible_locs,random_loc,for_castle,how_many,converted,REPEAT_j,random_castles}
        )}
        {CLEAR_VARIABLE random_number_of_castles,map}
    [/command]

    [command]
        [store_locations]
            terrain=Kh
            variable=keeps
        [/store_locations]

        {FOREACH keeps i_temp}
            [store_locations]
                terrain=Ch
                [and]
                    x,y=$keeps[$i_temp].x,$keeps[$i_temp].y
                    radius=999
                    [filter_radius]
                        terrain=Ch
                    [/filter_radius]
                [/and]
                variable=castle
            [/store_locations]

            {VARIABLE_OP type rand $castle_type}

            [terrain]
                x,y=$keeps[$i_temp].x,$keeps[$i_temp].y
                terrain=K$type
            [/terrain]

            {FOREACH castle j_temp}
                [terrain]
                    x,y=$castle[$j_temp].x,$castle[$j_temp].y
                    terrain=C$type
                [/terrain]
            {NEXT j_temp}

            {CLEAR_VARIABLE castle,type}
        {NEXT i_temp}
        {CLEAR_VARIABLE keeps}
    [/command]

#ifver WESNOTH_VERSION > 1.11.0
    [command]
        [store_unit]
            [filter]
            [/filter]
            variable=temp
            kill=yes
        [/store_unit]

        [store_starting_location]
            side=1
            variable=start
        [/store_starting_location]

        [unit]
            side=1
            x,y=$start.x,$start.y
            type=Mudcrawler
        [/unit]

        [store_locations]
            terrain=K*,*^K*
            [not]
                x,y=$start.x,$start.y
            [/not]
            variable=castles
        [/store_locations]

        {FOREACH castles i_temp}
            [find_path]
                [traveler]
                    type=Mudcrawler
                [/traveler]
                [destination]
                    x,y=$castles[$i_temp].x,$castles[$i_temp].y
                [/destination]
                allow_multiple_turns=yes
                check_teleport=no
            [/find_path]

            [if]
                {VARIABLE_CONDITIONAL path.hexes numerical_not_equals 0}
                [then]
                    {FOREACH path.step j_temp}
                        [if]
                            [not]
                                [have_location]
                                    x,y=$path.step[$j_temp].x,$path.step[$j_temp].y
                                    terrain=K*,C*,R*,*^V*
                                [/have_location]
                            [/not]
                            [then]
                                [terrain]
                                    x,y=$path.step[$j_temp].x,$path.step[$j_temp].y
                                    terrain=Rd
                                [/terrain]
                            [/then]
                        [/if]
                        [if]
                            [have_location]
                                x,y=$path.step[$j_temp].x,$path.step[$j_temp].y
                                terrain=*^V*
                                [not]
                                    terrain=*^Vm
                                [/not]
                            [/have_location]
                            [then]
                                [terrain]
                                    x,y=$path.step[$j_temp].x,$path.step[$j_temp].y
                                    layer=base
                                    terrain=Rd
                                [/terrain]
                            [/then]
                        [/if]
                    {NEXT j_temp}

                    [teleport]
                        [filter]
                            type=Mudcrawler
                        [/filter]
                        x,y=$castles[$i_temp].x,$castles[$i_temp].y
                    [/teleport]
                [/then]
            [/if]
        {NEXT i_temp}

        [kill]
            type=Mudcrawler
        [/kill]

        {FOREACH temp i_temp}
            [unstore_unit]
                variable=temp[$i_temp]
            [/unstore_unit]
        {NEXT i_temp}
        {CLEAR_VARIABLE path,castles,start,temp}
    [/command]
#endif
    {CLEAR_VARIABLE great_tree,castle_type}
#enddef

#define XE_HEIGHT ALTITUDE TERRAIN
    [height]
        height={ALTITUDE}
        terrain={TERRAIN}
    [/height]
#enddef

#define XE_ROAD_COST TERRAIN COST NEW_TERRAIN
    [road_cost]
        terrain={TERRAIN}
        cost={COST}
        convert_to={NEW_TERRAIN}
    [/road_cost]
#enddef

#define XE_ROAD_COST_BRIDGE TERRAIN COST BRIDGE ALT
    [road_cost]
        terrain={TERRAIN}
        cost={COST}
        convert_to_bridge={BRIDGE}
        convert_to={ALT}
    [/road_cost]
#enddef

#define XE_VILLAGE TERRAIN TYPE RATING LIKED_TERRAINLIST
    # Syntax shortcut
    [village]
        terrain={TERRAIN}
        convert_to={TYPE}
        rating={RATING}
        adjacent_liked={LIKED_TERRAINLIST}
    [/village]
#enddef

#define XE_CONVERT MINHEIGHT MAXHEIGHT MINTEMP MAXTEMP TERRAINLIST NEW_TERRAIN
    # Convert terrains to a terrain within the specified height and temp ranges.
    [convert]
        min_height={MINHEIGHT}
        max_height={MAXHEIGHT}
        min_temperature={MINTEMP}
        max_temperature={MAXTEMP}
        from={TERRAINLIST}
        to={NEW_TERRAIN}
    [/convert]
#enddef

#define XE_MIN_COST_ROAD X
    [road_cost]
        terrain={X}
        cost=1
        convert_to={X}
    [/road_cost]
#enddef

#define NOT_CASTLE
    [not]
        terrain=K*,C*,*^K*,*^C*
    [/not]
#enddef

#define MIN_COST_ROAD TERRAIN
    [road_cost]
        terrain={TERRAIN}
        cost=2
        convert_to={TERRAIN}
    [/road_cost]
#enddef
