#textdomain wesnoth-Mystery_Campaign
### macros used to define factions

# wmlindent: start ignoring
#define INIT_FACTION ID NAME
	[event]
		name=init_faction

		[filter_condition]
			[variable]
				name=scenario_number
				equals=1
			[/variable]
		[/filter_condition]

		{IF_VAR global.factions equals $null (
			[then]
				{VARIABLE global.factions {ID}}
			[/then]
			[else]
				{VARIABLE global.factions ($global.factions,{ID})}
			[/else]
		)}
	[/event]

    [event]
        name=set_recruitlist

        ## set side 1's faction in first scenario only
		{IF_VAR scenario_number equals 1 (
            [then]
                {VARIABLE sides 1}
            [/then]
            [else]
                {VARIABLE sides 2}
            [/else]
        )}

        ## loop through all the sides
        [while]
            [variable]
                name=sides
                less_than=4
            [/variable]
            [do]
                ## only do anything if faction is {NAME}
                [if]
                    [variable]
                        name=side_$sides|.faction
                        equals={ID}
                    [/variable]
                    [then]
						{VARIABLE side_$sides|.tfaction {NAME}}

                        ## get starting location
                        [store_starting_location]
                            side=$sides
                        [/store_starting_location]

                        ## clear the recruit list
                        [set_recruit]
                            side=$sides
                            recruit=""
                        [/set_recruit]

                        #{DEBUG_MSG (Side $side is the $faction|.)}
#enddef

#define ALLOW_RECRUIT TYPE DESCRIPTION
						[allow_recruit]
							side=$sides
							type={TYPE}
						[/allow_recruit]

						{IF_VAR recruits equals $null (
							[then]
								{VARIABLE recruits {DESCRIPTION}}
							[/then]
							[else]
								{VARIABLE_OP recruits value ("$recruits" + ", " + {DESCRIPTION})}
							[/else]
						)}
#enddef

#define ALLOW_EXTRA_RECRUIT CHANCE TYPE DESCRIPTION
						[unit]
							side=$sides
							to_variable=dummy
							type={TYPE}
						[/unit]

						[store_gold]
							side=$sides
						[/store_gold]
						{VARIABLE cost "$($dummy.cost|*5*$dummy.level)"}

						{VARIABLE_OP gold sub $cost}
						[if]
							[and]
								[variable]
									name=gold
									greater_than=$cost
								[/variable]
								[variable]
									name=sides
									not_equals=1
								[/variable]
							[/and]
							[then]
								#{DEBUG_MSG ($gold gold </> $cost cost)}
								{RANDOM 0..99}
								{IF_VAR random less_than {CHANCE} (
									[then]
										#{DEBUG_MSG (side $side can now recruit {DESCRIPTION})}
										{ALLOW_RECRUIT {TYPE} {DESCRIPTION}}
									[/then]
								)}
								{CLEAR_VARIABLE random}
							[/then]
						[/if]
						{CLEAR_VARIABLE cost,gold,dummy}
#enddef


#define ALLOW_RECRUIT_PLAYER TYPE DESCRIPTION
						{IF_VAR sides equals 1 (
							[then]
								{ALLOW_RECRUIT {TYPE} {DESCRIPTION}}
							[/then]
						)}
#enddef

#define FACTION_PLAYER_LEADER TYPE
						[if]
							[variable]
								name=sides
								equals=1
							[/variable]
							[not]
								[have_unit]
									side=$sides
								[/have_unit]
							[/not]
							[then]
								[unit]
									side=$sides
									canrecruit=yes
									type={TYPE}
									x,y=$location.x,$location.y
									generate_name=no
									random_traits=no
								[/unit]
								{VARIABLE side_$sides|.original_leader {TYPE}}
							[/then]
						[/if]
#enddef

#define FACTION_RANDOM_LEADER LEADER1 LEADER2
						[if]
							[not]
								[have_unit]
									side=$sides
								[/have_unit]
							[/not]
							[then]
								{IF_VAR scenario_number less_than 4 (
									[then]
										{VARIABLE_OP leader rand({LEADER1})}
									[/then]
									[else]
										{IF_VAR scenario_number less_than 13 (
											[then]
												{VARIABLE_OP leader rand({LEADER1},{LEADER2})}
											[/then]
											[else]
												{VARIABLE_OP leader rand({LEADER2})}
											[/else]
										)}
									[/else]
								)}

								[unit]
									side=$sides
									canrecruit=yes
									type=$leader
									to_variable=side_$sides|.leader
									generate_name=yes
									random_traits=no
								[/unit]
 								#{DEBUG_MSG (Leader of $side is a $leader)}
								{CLEAR_VARIABLE leader}

								{IF_VAR sides equals 2 (
									[then]
										[unstore_unit]
											variable=side_$sides|.leader[0]
											x,y=$location.x,$location.y
										[/unstore_unit]
									[/then]
								)}
							[/then]
						[/if]
#enddef

#define END
						{VARIABLE_OP side_$sides|.recruits to_variable recruits}
 						#{DEBUG_MSG (side=$side recruits=$recruits)}
					[/then]
				[/if]
				{VARIABLE_OP sides add 1}
			[/do]
		[/while]
		{CLEAR_VARIABLE sides,location,recruits}
	[/event]
#enddef
# wmlindent: stop ignoring
